{"version":3,"sources":["Components/Header.js","Components/MemeFontEdit.js","Components/Makememe.js","Components/MemeGallery.js","Apis/MemesApi.js","Components/UploadImage.js","Components/Tab.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","MemeFontEdit","props","increaseSize","component","document","getElementsByClassName","style","window","getComputedStyle","getPropertyValue","currentSize","parseFloat","fontSize","decreaseSize","setColor","color","getElementById","value","setFont","font","fontFamily","toggleTextShadow","text","getElementsByTagName","state","textShadow","i","length","setState","onClick","this","type","id","onChange","Component","Makememe","updateState","e","target","addText","memetext","textID","innerHTML","textid","resetText","textList","increaseFont","elem","decreaseFont","imgStyle","memeImage","setAttribute","usestyle","imgurl","width","height","bind","alt","src","unit","placeholder","domtoimage","toBlob","then","blob","FileSaver","saveAs","heightTowidth","memeurl","MemeGallery","setURL","item","ratio","activeMeme","url","htwratio","scrollTo","memeArray","map","name","MemeAPI","memes","isLoaded","error","fetch","result","json","data","Uploadimage","display","reader","FileReader","onload","readAsDataURL","files","for","accept","Tab","Tabs","tabId","tabName","tabContent","onClickTab","index","findIndex","activeTab","classname","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.cc9acea4.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Header = () => {\r\n  return <div className = \"header\">MEME GEN</div> ;\r\n}\r\n\r\nexport default Header;","import React, {Component} from \"react\";\r\nimport \"./MemeGallery.css\";\r\n\r\nexport default class MemeFontEdit extends Component {\r\n  constructor (props) {\r\n    super (props);\r\n    this.state = {\r\n      textShadow: true\r\n    };\r\n  }\r\n\r\n  increaseSize = () => {\r\n    let component = document.getElementsByClassName(\"meme-download\")[0];\r\n    let style = window.getComputedStyle(component, null).getPropertyValue('font-size');\r\n    let currentSize = parseFloat(style);\r\n    component.style.fontSize = (currentSize + 5) + \"px\";\r\n  }\r\n\r\n  decreaseSize = () => {\r\n    let component = document.getElementsByClassName(\"meme-download\")[0];\r\n    let style = window.getComputedStyle(component, null).getPropertyValue('font-size');\r\n    let currentSize = parseFloat(style);\r\n    component.style.fontSize = (currentSize - 5) + \"px\";\r\n  }\r\n  \r\n  setColor = () => {\r\n    let color = document.getElementById('color-input').value;\r\n    let component = document.getElementsByClassName(\"meme-download\")[0];\r\n    component.style.color = color;\r\n  }\r\n\r\n  setFont = () => {\r\n    let font = document.getElementById('select-font').value;\r\n    let component = document.getElementsByClassName(\"meme-download\")[0];\r\n    component.style.fontFamily =  \" \" + font + \" , sans-serif\" ;\r\n  }\r\n\r\n  toggleTextShadow = () => {\r\n    let text = document.getElementsByTagName(\"p\");\r\n    if (this.state.textShadow) {\r\n      for (let i = 0; i<text.length; i++) {\r\n        text[i].style.textShadow = \"none\";\r\n      }\r\n      this.setState ({ textShadow: false });\r\n    } else {\r\n      for (let i = 0; i<text.length; i++) {\r\n        text[i].style.textShadow = \" #000 0px 0px 1px, #000 0px 0px 1px,   #000 0px 0px 1px,#000 0px 0px 1px,   #000 0px 0px 1px,   #000 0px 0px 1px,#000 0px 0px 1px,   #000 0px 0px 1px,   #000 0px 0px 1px,#000 0px 0px 1px,   #000 0px 0px 1px,   #000 0px 0px 1px\";\r\n      }\r\n      this.setState ({ textShadow: true });\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className = \"meme-font-edit\">\r\n        <div className = \"meme-font-edit-option\">\r\n          <button className = \"make-meme-button\" onClick = {this.decreaseSize} >-</button>\r\n          Font Size\r\n          <button className = \"make-meme-button\" onClick = {this.increaseSize} >+</button>\r\n        </div>\r\n        <div className = \"meme-font-edit-option\">\r\n          Select Font Color \r\n          <input type = \"color\" id = \"color-input\" onChange = {this.setColor} />\r\n        </div>\r\n        <div className = \"meme-font-edit-option\">\r\n          Select Font\r\n          <select id = \"select-font\" onChange = {this.setFont}>\r\n            <option value = \"Roboto\" >Roboto</option>\r\n            <option value = \"Impact\" >Impact</option>\r\n            <option value = \"Arial\" >Arial</option>\r\n          </select>\r\n        </div>\r\n        <div className = \"meme-font-edit-option\">\r\n          <button className = \"make-meme-button\" onClick = {this.toggleTextShadow} >Toggle text shadow</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, {Component} from \"react\";\r\nimport \"./MemeGallery.css\";\r\nimport MemeFontEdit  from \"./MemeFontEdit\";\r\nimport '@deckdeckgo/drag-resize-rotate';\r\nimport domtoimage from 'dom-to-image';\r\nimport {saveAs} from 'file-saver';\r\nimport FileSaver from \"file-saver\";\r\n\r\nclass Makememe extends Component {\r\n  constructor (props) {\r\n    super (props);\r\n    this.state = {\r\n      imgurl: \"\",\r\n      text: \"\",\r\n      textID: 6,\r\n      width: 600,\r\n      height: 600\r\n    };\r\n    this.addText = this.addText.bind(this);\r\n  }\r\n\r\n  static getDerivedStateFromProps (props,state) {\r\n    if (props.heightTowidth >= 1.0) {\r\n      return {\r\n        imgurl: props.memeurl,\r\n        width: 600/props.heightTowidth,\r\n        height: 600\r\n      }\r\n    } else {\r\n      return {\r\n        imgurl: props.memeurl,\r\n        width: 600,\r\n        height: 600*props.heightTowidth\r\n      }\r\n    }\r\n  }\r\n\r\n  updateState = (e) => {\r\n    this.state.text = e.target.value;\r\n  }\r\n\r\n  addText = () => {\r\n    let memetext = this.state.text;\r\n    let textElem = document.getElementsByTagName(\"p\")[this.state.textID];\r\n    textElem.innerHTML = memetext;\r\n    let textid = this.state.textID - 1;\r\n    this.setState (\r\n      {\r\n        text: \"\",\r\n        textID: textid\r\n      }\r\n    )\r\n  }\r\n\r\n  resetText = () => {\r\n    let textList = document.getElementsByTagName(\"p\");\r\n    let i=0;\r\n    for (i=0; i<textList.length; i++) {\r\n      textList[i].innerHTML = \"\";\r\n    }\r\n    document.getElementById(\"make-meme-text-input\").value = \"\";\r\n    this.setState ({ \r\n      textID: 4\r\n    })\r\n  }\r\n\r\n  increaseFont = () => {\r\n    let elem = document.getElementsByClassName(\"meme-download\")[0];\r\n    let style = window.getComputedStyle(elem, null).getPropertyValue('font-size');\r\n    let currentSize = parseFloat(style);\r\n    elem.style.fontSize = (currentSize +5) + 'px';\r\n  }\r\n\r\n  decreaseFont = () => {\r\n    let elem = document.getElementsByClassName(\"meme-download\")[0];\r\n    let style = window.getComputedStyle(elem, null).getPropertyValue('font-size');\r\n    let currentSize = parseFloat(style);\r\n    elem.style.fontSize = (currentSize -5) + 'px';\r\n  }\r\n\r\n  imgStyle = () => {\r\n    let memeImage = document.getElementById(\"meme-img\");\r\n    memeImage.setAttribute(\"width\",\"600\");\r\n    memeImage.setAttribute(\"height\",\"600\");\r\n  }\r\n\r\n  usestyle = {\r\n    \"--width\": \"200\",\r\n    \"--height\": \"100\",\r\n    \"--top\": \"0\"\r\n  }\r\n\r\n  render () {\r\n\r\n    const saveMeme = () => {\r\n      domtoimage.toBlob(document.getElementsByClassName('meme-download')[0])\r\n        .then(function(blob) {\r\n          FileSaver.saveAs(blob, 'meme.png');\r\n      });\r\n    }\r\n    return (\r\n      <div className = \"make-meme\">\r\n        <div className = \"make-meme-image\">\r\n          <div className = \"meme-download\">\r\n            <img alt = \"your meme goes here\" width = {this.state.width} height = {this.state.height} src = {this.state.imgurl}></img>\r\n            <deckgo-drr style={this.usestyle} unit = \"px\"><p></p></deckgo-drr>\r\n            <deckgo-drr style={this.usestyle} unit = \"px\"><p></p></deckgo-drr>\r\n            <deckgo-drr style={this.usestyle} unit = \"px\"><p></p></deckgo-drr>\r\n            <deckgo-drr style={this.usestyle} unit = \"px\"><p></p></deckgo-drr>\r\n            <deckgo-drr style={this.usestyle} unit = \"px\"><p></p></deckgo-drr>\r\n            <deckgo-drr style={this.usestyle} unit = \"px\"><p></p></deckgo-drr>\r\n            <deckgo-drr style={this.usestyle} unit = \"px\"><p></p></deckgo-drr>\r\n          </div>\r\n        </div>\r\n        <div className = \"make-meme-text\">\r\n          <div id = \"make-meme-text-head\">Add your magic !</div>\r\n          <input \r\n            id = \"make-meme-text-input\" \r\n            onChange = {(e) => this.updateState(e)} \r\n            placeholder = \"Your text here\" \r\n          />\r\n          <button className = \"make-meme-button\" id = \"add-button\" onClick = {this.addText} >Add</button>\r\n          <MemeFontEdit />\r\n          <div className = \"make-meme-action-button\">\r\n            <button className = \"make-meme-button\" onClick = {this.resetText} >Reset</button>\r\n            <button className = \"make-meme-button\" onClick = {saveMeme} >Save</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Makememe;","import React, {Component} from \"react\";\r\nimport \"./MemeGallery.css\";\r\nimport Makememe from \"./Makememe\";\r\n\r\nclass MemeGallery extends Component{\r\n  constructor (props) {\r\n    super (props);\r\n    this.state = {\r\n      memeArray: [],\r\n      activeMeme: \"\",\r\n      htwratio: 1\r\n    };\r\n  }\r\n  \r\n  static getDerivedStateFromProps (props, state) {\r\n    return {\r\n      memeArray: props.memeArray\r\n    }\r\n  }\r\n\r\n  setURL = (item) => {\r\n    let ratio = item.height/item.width;\r\n    this.setState (\r\n      {\r\n        activeMeme: item.url,\r\n        htwratio: ratio\r\n      }\r\n    )\r\n    window.scrollTo(0,700);\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <div className = \"meme-gallery\"> \r\n          {\r\n            this.state.memeArray.map((item) => {\r\n              let height=\"0%\" , width=\"0%\";\r\n              if (item.height >= item.width) {\r\n                height = \"100%\";\r\n                width = \"auto\";\r\n              } else {\r\n                height = \"auto\";\r\n                width = \"100%\";\r\n              }\r\n  \r\n              return (\r\n                <div className = \"meme-card\" onClick = {() => this.setURL(item)}>\r\n                  <img className = \"meme-img\" src = {item.url} height = {height} width = {width} />\r\n                  <div className = \"meme-name\">{item.name}</div>\r\n                </div>\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n        <Makememe \r\n          memeurl = {this.state.activeMeme} \r\n          heightTowidth = {this.state.htwratio}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n  \r\n}\r\n\r\nexport default MemeGallery;\r\n","import React, {Component} from \"react\";\r\nimport MemeGallery from \"../Components/MemeGallery\";\r\n\r\nclass MemeAPI extends Component {\r\n  constructor (props) {\r\n    super (props);\r\n    this.state = {\r\n      memes: [],\r\n      isLoaded: false,\r\n      error: null\r\n    };\r\n  }\r\n\r\n  componentDidMount () {\r\n    fetch (\"https://api.imgflip.com/get_memes\")\r\n      .then (result => result.json())\r\n      .then (\r\n        (result) => {\r\n          this.setState (\r\n            {\r\n              isLoaded: true,\r\n              memes: result.data.memes\r\n            }\r\n          )\r\n        },\r\n\r\n        (error) => {\r\n          this.setState (\r\n            {\r\n              isLoaded: true,\r\n              error\r\n            }\r\n          )\r\n        }\r\n      )\r\n  }\r\n\r\n  render () {\r\n    if (this.state.error) {\r\n      return <div>Error Loading. Reload.</div>\r\n    } else {\r\n      return <MemeGallery memeArray = {this.state.memes} />\r\n    }\r\n  }\r\n}\r\n\r\nexport default MemeAPI;","import React, {Component} from \"react\";\r\nimport Makememe from \"./Makememe\";\r\nimport \"./style.css\";\r\n\r\nclass Uploadimage extends Component {\r\n  state = {\r\n    memeurl: \"\"\r\n  }\r\n  display = (e) => {\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      this.setState ({\r\n        memeurl: reader.result,\r\n      })\r\n    }\r\n    reader.readAsDataURL(e.target.files[0]);\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <div className = \"upload-image\">\r\n          <label for = \"upload-image-input\" className = \"upload-image-label\">\r\n            <input type = \"file\" id = \"upload-image-input\" accept = \"image/*\" onChange = {(e) => this.display(e)}/>\r\n            Choose Meme\r\n          </label>\r\n        </div>\r\n        <Makememe \r\n          memeurl = {this.state.memeurl} \r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Uploadimage;","import React, {Component} from \"react\";\r\nimport MemeAPI from \"../Apis/MemesApi\";\r\nimport Uploadimage from \"../Components/UploadImage\";\r\nimport \"./style.css\";\r\nimport '@deckdeckgo/drag-resize-rotate';\r\n\r\nexport default class Tab extends Component {\r\n  constructor (props) {\r\n    super (props);\r\n    this.state = {\r\n      activeTab: 0\r\n    };\r\n  }\r\n\r\n  Tabs = [\r\n    {\r\n      tabId: \"0\",\r\n      tabName: \"From Templates\",\r\n      tabContent: <MemeAPI />\r\n    },\r\n    {\r\n      tabId: \"1\",\r\n      tabName: \"From Gallery\",\r\n      tabContent: <Uploadimage />\r\n    }\r\n  ]\r\n\r\n  onClickTab = (e) => {\r\n    let id = e.target.id;\r\n    let index = this.Tabs.findIndex (\r\n      (item) => {\r\n        return item.tabId === id;\r\n      }\r\n    );\r\n    this.setState (\r\n      {activeTab: index}\r\n    )\r\n  }\r\n\r\n  render () {\r\n\r\n    return (\r\n      <div className = \"tabs\">\r\n        <ol className = \"tab-list\">\r\n          {\r\n            this.Tabs.map( (item) => {\r\n              let classname = \"tab-list-item\";\r\n\r\n              if (item.tabId == this.state.activeTab) {\r\n                classname += \" tab-list-active\";\r\n              }\r\n\r\n              return (\r\n                <li className = {classname} id = {item.tabId} onClick = {(e) => this.onClickTab(e)}>{item.tabName}</li>\r\n              )\r\n            })\r\n          }\r\n        </ol>\r\n        <div className = \"tab-content\">\r\n          {this.Tabs[this.state.activeTab].tabContent}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\nimport './App.css';\nimport Header from \"./Components/Header\"; \nimport Tab from \"./Components/Tab\";\n\nconst App = () => {\n  return (\n    <div>\n      <Header />\n      <Tab />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}